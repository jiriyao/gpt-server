type (
	Request {
		Name string `path:"name,options=you|me"`
	}

	Response {
		Message string `json:"message"`
	}

	Resp { //统一的返回格式
		Code int64       `json:"code"`
		Msg  string      `json:"msg"`
		Data interface{} `json:"data,omitempty"`
	}

	ChatGptQuestionRequest {
		StreamId string `json:"stream_id,optional"`
		Question string `json:"question"`
	}

	ChatGptQuestionResponse {
		Q      string `json:"q"`
		Answer string `json:"answer"`
	}

	LoginRequest {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	MsgOptions {
		ParentMessageId string `json:"parentMessageId,optional"`
	}

	ChatProcessRequest {
		StreamId       string     `json:"stream_id,optional"`
		ConversationId string     `json:"conversation_id,optional"`
		Prompt         string     `json:"prompt"`
		Mode           string     `json:"mode,optional"`
		Options        MsgOptions `json:"options"`
		SystemMessage  string     `json:"systemMessage,optional"`
		Temperature    float32    `json:"temperature,optional"`
		TopP           float32    `json:"top_p,optional"`
	}

	ChatProcessResponse {
		Role            string `json:"role"`
		Id              string `json:"id"`
		ParentMessageId string `json:"parentMessageId,optional"`
		Text            string `json:"text"`
		FinishReason    string `json:"finish_reason"`
		Model           string `json:"model"`
		DeltaText       string `json:"delta_text"`
	}
)
@server(
	//	jwt: Auth // 登录验证中间件声明
	middleware: CommonRoute // 路由中间件声明
	prefix: chatgpt3
	timeout : 10000ms
)

service code-api {
	@handler CodeHandler
	post /from/:name  returns (Resp)
	
	@handler ChatgptQuestionHandler
	post /question/async (ChatGptQuestionRequest) returns (Resp)
	
	@handler ChatgptQuestionSyncHandler
	post /question/sync (ChatGptQuestionRequest) returns (Resp)
	
	@handler ChatgptAuthQuestionHandler
	post /question/auth (ChatGptQuestionRequest) returns (Resp)
	
}

@server(
	//	jwt: Auth // 登录验证中间件声明
	middleware: CommonRoute // 路由中间件声明
	prefix: chatgpt3
	timeout : 100000ms
)
service code-api {
	@handler Chatgpt35Stream
	post /question/streamsync35 (ChatGptQuestionRequest) returns (Resp)
	
	@handler ChatProcessRequestStream
	post /chat-progress (ChatProcessRequest) returns (Resp)
}

@server(
	timeout : 100000ms
	middleware: CommonRoute // 路由中间件声明
	prefix: chatgpt3
)
service code-api {
	@handler LoginHandler
	post /user/login (LoginRequest) returns (Resp)
	
	@handler SseTestHandler
	post /sse/test (ChatGptQuestionRequest) returns (Resp)
}